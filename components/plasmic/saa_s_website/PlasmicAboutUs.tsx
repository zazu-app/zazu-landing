// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 3ANMJmRMrYZuN2eTrhtZhF
// Component: o2GFouo-K93R

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import Header2 from "../../Header2"; // plasmic-import: abUuZ_OBzqIx/component
import Button from "../../Button"; // plasmic-import: 4uc5kP8l8A4m/component
import HeroSection from "../../HeroSection"; // plasmic-import: zInb_6mM-BOd/component
import Footer from "../../Footer"; // plasmic-import: NuqX60hlTorY/component

import { useScreenVariants as useScreenVariantsquHCgLsadSrl } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: quHCgLSADSrl/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: 3ANMJmRMrYZuN2eTrhtZhF/projectcss
import sty from "./PlasmicAboutUs.module.css"; // plasmic-import: o2GFouo-K93R/css

import ChecksvgIcon from "./icons/PlasmicIcon__Checksvg"; // plasmic-import: JYvICnJX2T43/icon
import ArrowRightsvgIcon from "./icons/PlasmicIcon__ArrowRightsvg"; // plasmic-import: 48peJZS1xju3/icon
import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: NBclej6tpD3v/icon

createPlasmicElementProxy;

export type PlasmicAboutUs__VariantMembers = {};
export type PlasmicAboutUs__VariantsArgs = {};
type VariantPropType = keyof PlasmicAboutUs__VariantsArgs;
export const PlasmicAboutUs__VariantProps = new Array<VariantPropType>();

export type PlasmicAboutUs__ArgsType = {};
type ArgPropType = keyof PlasmicAboutUs__ArgsType;
export const PlasmicAboutUs__ArgProps = new Array<ArgPropType>();

export type PlasmicAboutUs__OverridesType = {
  root?: Flex__<"div">;
  header2?: Flex__<typeof Header2>;
  pageBanner?: Flex__<"div">;
  columns?: Flex__<"div">;
  h1?: Flex__<"h1">;
  features?: Flex__<"section">;
  container4?: Flex__<"div">;
  outerRow2?: Flex__<"div">;
  row2?: Flex__<"div">;
  container5?: Flex__<"div">;
  outerRow3?: Flex__<"div">;
  row4?: Flex__<"div">;
  link?: Flex__<"a"> & Partial<LinkProps>;
  container6?: Flex__<"div">;
  outerRow4?: Flex__<"div">;
  row3?: Flex__<"div">;
  heroSection?: Flex__<typeof HeroSection>;
  footer?: Flex__<typeof Footer>;
};

export interface DefaultAboutUsProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicAboutUs__RenderFunc(props: {
  variants: PlasmicAboutUs__VariantsArgs;
  args: PlasmicAboutUs__ArgsType;
  overrides: PlasmicAboutUs__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsquHCgLsadSrl()
  });

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <Stack__
          as={"div"}
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          hasGap={true}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            sty.root
          )}
        >
          <div className={classNames(projectcss.all, sty.freeBox__cjGz7)}>
            <Header2
              data-plasmic-name={"header2"}
              data-plasmic-override={overrides.header2}
              className={classNames("__wab_instance", sty.header2)}
            />
          </div>
          <div
            data-plasmic-name={"pageBanner"}
            data-plasmic-override={overrides.pageBanner}
            className={classNames(projectcss.all, sty.pageBanner)}
          >
            <div className={classNames(projectcss.all, sty.freeBox___8Hrx2)}>
              <Stack__
                as={"div"}
                data-plasmic-name={"columns"}
                data-plasmic-override={overrides.columns}
                hasGap={true}
                className={classNames(projectcss.all, sty.columns)}
              >
                <div className={classNames(projectcss.all, sty.column__wwVY)}>
                  <Stack__
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox___9Zgok)}
                  >
                    <h1
                      data-plasmic-name={"h1"}
                      data-plasmic-override={overrides.h1}
                      className={classNames(
                        projectcss.all,
                        projectcss.h1,
                        projectcss.__wab_text,
                        sty.h1
                      )}
                    >
                      {"About us"}
                    </h1>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___1RkYi
                      )}
                    >
                      {
                        "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam,"
                      }
                    </div>
                  </Stack__>
                </div>
                <div className={classNames(projectcss.all, sty.column___0EON)}>
                  <PlasmicImg__
                    alt={""}
                    className={classNames(sty.img__gkfiQ)}
                    displayHeight={"auto"}
                    displayMaxHeight={"none"}
                    displayMaxWidth={"100%"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={"auto"}
                    loading={"lazy"}
                    src={{
                      src: "/plasmic/saa_s_website/images/corinneKutzTMi2R5NfoUnsplashjpg.jpg",
                      fullWidth: 1920,
                      fullHeight: 1280,
                      aspectRatio: undefined
                    }}
                  />
                </div>
              </Stack__>
            </div>
          </div>
          <div className={classNames(projectcss.all, sty.freeBox__gByY)}>
            <section
              data-plasmic-name={"features"}
              data-plasmic-override={overrides.features}
              className={classNames(projectcss.all, sty.features)}
            >
              <div className={classNames(projectcss.all, sty.column__bBaf1)}>
                <h2
                  className={classNames(
                    projectcss.all,
                    projectcss.h2,
                    projectcss.__wab_text,
                    sty.h2__rWf6Z
                  )}
                >
                  {hasVariant(globalVariants, "screen", "mobileOnly")
                    ? "WHY CHOOSE US"
                    : "WHY CHOOSE US"}
                </h2>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__xj5Do
                  )}
                >
                  {
                    "Lorem Ipsum is simply dummy text of the printing and typesetting industry. \nLorem Ipsum has been the industry's standard dummy text ever since the 1500s"
                  }
                </div>
                <div
                  data-plasmic-name={"container4"}
                  data-plasmic-override={overrides.container4}
                  className={classNames(projectcss.all, sty.container4)}
                >
                  <div
                    data-plasmic-name={"outerRow2"}
                    data-plasmic-override={overrides.outerRow2}
                    className={classNames(projectcss.all, sty.outerRow2)}
                  >
                    <div
                      data-plasmic-name={"row2"}
                      data-plasmic-override={overrides.row2}
                      className={classNames(projectcss.all, sty.row2)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.column__jWdTg
                        )}
                      >
                        <Stack__
                          as={"div"}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__gaWbx
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__dGvYk
                            )}
                          />

                          <h3
                            className={classNames(
                              projectcss.all,
                              projectcss.h3,
                              projectcss.__wab_text,
                              sty.h3__lCdh9
                            )}
                          >
                            {hasVariant(globalVariants, "screen", "mobileOnly")
                              ? "Some value proposition of your service."
                              : "Some value proposition of your service."}
                          </h3>
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__t8850
                            )}
                          >
                            {hasVariant(globalVariants, "screen", "mobileOnly")
                              ? "Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book."
                              : "Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book."}
                          </div>
                          <Button
                            className={classNames(
                              "__wab_instance",
                              sty.button__kvmak
                            )}
                            color={"blue"}
                            endIcon={
                              <ArrowRightsvgIcon
                                className={classNames(
                                  projectcss.all,
                                  sty.svg__fQb5U
                                )}
                                role={"img"}
                              />
                            }
                            shape={"rounded"}
                            showEndIcon={true}
                            submitsForm={true}
                          >
                            {"Learn more"}
                          </Button>
                        </Stack__>
                      </div>
                      <div
                        className={classNames(projectcss.all, sty.column__igme)}
                      >
                        <PlasmicImg__
                          alt={""}
                          className={classNames(sty.img__tGkcj)}
                          displayHeight={"400px"}
                          displayMaxHeight={"none"}
                          displayMaxWidth={"none"}
                          displayMinHeight={"0"}
                          displayMinWidth={"0"}
                          displayWidth={"400px"}
                          loading={"lazy"}
                          src={{
                            src: "/plasmic/saa_s_website/images/brookeCagleWhwyBmtn30Unsplashjpg.jpg",
                            fullWidth: 1920,
                            fullHeight: 1280,
                            aspectRatio: undefined
                          }}
                        />
                      </div>
                    </div>
                  </div>
                </div>
                <div
                  data-plasmic-name={"container5"}
                  data-plasmic-override={overrides.container5}
                  className={classNames(projectcss.all, sty.container5)}
                >
                  <div
                    data-plasmic-name={"outerRow3"}
                    data-plasmic-override={overrides.outerRow3}
                    className={classNames(projectcss.all, sty.outerRow3)}
                  >
                    <div
                      data-plasmic-name={"row4"}
                      data-plasmic-override={overrides.row4}
                      className={classNames(projectcss.all, sty.row4)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.column__w919M
                        )}
                      >
                        <PlasmicImg__
                          alt={""}
                          className={classNames(sty.img__z8ApJ)}
                          displayHeight={"auto"}
                          displayMaxHeight={"none"}
                          displayMaxWidth={
                            hasVariant(globalVariants, "screen", "mobileOnly")
                              ? "100%"
                              : "100%"
                          }
                          displayMinHeight={"0"}
                          displayMinWidth={"0"}
                          displayWidth={"auto"}
                          loading={
                            hasVariant(globalVariants, "screen", "mobileOnly")
                              ? "lazy"
                              : "lazy"
                          }
                          src={
                            hasVariant(globalVariants, "screen", "mobileOnly")
                              ? {
                                  src: "/plasmic/saa_s_website/images/about2Jpg.jpg",
                                  fullWidth: 570,
                                  fullHeight: 650,
                                  aspectRatio: undefined
                                }
                              : {
                                  src: "/plasmic/saa_s_website/images/about2Jpg.jpg",
                                  fullWidth: 570,
                                  fullHeight: 650,
                                  aspectRatio: undefined
                                }
                          }
                        />
                      </div>
                      <div
                        className={classNames(projectcss.all, sty.column__szSb)}
                      >
                        <h2
                          className={classNames(
                            projectcss.all,
                            projectcss.h2,
                            projectcss.__wab_text,
                            sty.h2__pai9J
                          )}
                        >
                          {hasVariant(globalVariants, "screen", "mobileOnly")
                            ? "We Execute Our Ideas \nThe Start To Finish."
                            : "We Execute Our Ideas \nThe Start To Finish."}
                        </h2>
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__jANhQ
                          )}
                        >
                          {
                            "Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged."
                          }
                        </div>
                        <Stack__
                          as={PlasmicLink__}
                          data-plasmic-name={"link"}
                          data-plasmic-override={overrides.link}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            projectcss.a,
                            sty.link
                          )}
                          component={Link}
                          platform={"nextjs"}
                        >
                          {false ? (
                            <IconIcon
                              className={classNames(
                                projectcss.all,
                                sty.svg__aG5Y
                              )}
                              role={"img"}
                            />
                          ) : null}
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__vTlAz
                            )}
                          >
                            {"LEARN More"}
                          </div>
                          {false ? (
                            <IconIcon
                              className={classNames(
                                projectcss.all,
                                sty.svg__xs86M
                              )}
                              role={"img"}
                            />
                          ) : null}
                        </Stack__>
                      </div>
                    </div>
                  </div>
                </div>
                <div
                  data-plasmic-name={"container6"}
                  data-plasmic-override={overrides.container6}
                  className={classNames(projectcss.all, sty.container6)}
                >
                  <div
                    data-plasmic-name={"outerRow4"}
                    data-plasmic-override={overrides.outerRow4}
                    className={classNames(projectcss.all, sty.outerRow4)}
                  >
                    <div
                      data-plasmic-name={"row3"}
                      data-plasmic-override={overrides.row3}
                      className={classNames(projectcss.all, sty.row3)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.column__cPLvU
                        )}
                      >
                        <PlasmicImg__
                          alt={""}
                          className={classNames(sty.img__xwfpS)}
                          displayHeight={"400px"}
                          displayMaxHeight={"none"}
                          displayMaxWidth={"none"}
                          displayMinHeight={"0"}
                          displayMinWidth={"0"}
                          displayWidth={"400px"}
                          loading={"lazy"}
                          src={{
                            src: "/plasmic/saa_s_website/images/reading9255891920Jpg.jpg",
                            fullWidth: 1920,
                            fullHeight: 1280,
                            aspectRatio: undefined
                          }}
                        />
                      </div>
                      <div
                        className={classNames(projectcss.all, sty.column__fxru)}
                      >
                        <Stack__
                          as={"div"}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__o4MFq
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__j0Kpt
                            )}
                          />

                          <h3
                            className={classNames(
                              projectcss.all,
                              projectcss.h3,
                              projectcss.__wab_text,
                              sty.h3__hGgLi
                            )}
                          >
                            {hasVariant(globalVariants, "screen", "mobileOnly")
                              ? "Some value proposition of your service."
                              : "Some value proposition of your service."}
                          </h3>
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__z7T67
                            )}
                          >
                            {hasVariant(globalVariants, "screen", "mobileOnly")
                              ? "Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book."
                              : "Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book."}
                          </div>
                          <Button
                            className={classNames(
                              "__wab_instance",
                              sty.button__rtZiv
                            )}
                            color={"blue"}
                            endIcon={
                              <ArrowRightsvgIcon
                                className={classNames(
                                  projectcss.all,
                                  sty.svg__go1L
                                )}
                                role={"img"}
                              />
                            }
                            shape={"rounded"}
                            showEndIcon={true}
                            submitsForm={true}
                          >
                            {"Learn more"}
                          </Button>
                        </Stack__>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </section>
            <HeroSection
              data-plasmic-name={"heroSection"}
              data-plasmic-override={overrides.heroSection}
              className={classNames("__wab_instance", sty.heroSection)}
            />
          </div>
          <Footer
            data-plasmic-name={"footer"}
            data-plasmic-override={overrides.footer}
            className={classNames("__wab_instance", sty.footer)}
          />
        </Stack__>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "header2",
    "pageBanner",
    "columns",
    "h1",
    "features",
    "container4",
    "outerRow2",
    "row2",
    "container5",
    "outerRow3",
    "row4",
    "link",
    "container6",
    "outerRow4",
    "row3",
    "heroSection",
    "footer"
  ],
  header2: ["header2"],
  pageBanner: ["pageBanner", "columns", "h1"],
  columns: ["columns", "h1"],
  h1: ["h1"],
  features: [
    "features",
    "container4",
    "outerRow2",
    "row2",
    "container5",
    "outerRow3",
    "row4",
    "link",
    "container6",
    "outerRow4",
    "row3"
  ],
  container4: ["container4", "outerRow2", "row2"],
  outerRow2: ["outerRow2", "row2"],
  row2: ["row2"],
  container5: ["container5", "outerRow3", "row4", "link"],
  outerRow3: ["outerRow3", "row4", "link"],
  row4: ["row4", "link"],
  link: ["link"],
  container6: ["container6", "outerRow4", "row3"],
  outerRow4: ["outerRow4", "row3"],
  row3: ["row3"],
  heroSection: ["heroSection"],
  footer: ["footer"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  header2: typeof Header2;
  pageBanner: "div";
  columns: "div";
  h1: "h1";
  features: "section";
  container4: "div";
  outerRow2: "div";
  row2: "div";
  container5: "div";
  outerRow3: "div";
  row4: "div";
  link: "a";
  container6: "div";
  outerRow4: "div";
  row3: "div";
  heroSection: typeof HeroSection;
  footer: typeof Footer;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicAboutUs__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicAboutUs__VariantsArgs;
    args?: PlasmicAboutUs__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicAboutUs__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicAboutUs__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicAboutUs__ArgProps,
          internalVariantPropNames: PlasmicAboutUs__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicAboutUs__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicAboutUs";
  } else {
    func.displayName = `PlasmicAboutUs.${nodeName}`;
  }
  return func;
}

export const PlasmicAboutUs = Object.assign(
  // Top-level PlasmicAboutUs renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    header2: makeNodeComponent("header2"),
    pageBanner: makeNodeComponent("pageBanner"),
    columns: makeNodeComponent("columns"),
    h1: makeNodeComponent("h1"),
    features: makeNodeComponent("features"),
    container4: makeNodeComponent("container4"),
    outerRow2: makeNodeComponent("outerRow2"),
    row2: makeNodeComponent("row2"),
    container5: makeNodeComponent("container5"),
    outerRow3: makeNodeComponent("outerRow3"),
    row4: makeNodeComponent("row4"),
    link: makeNodeComponent("link"),
    container6: makeNodeComponent("container6"),
    outerRow4: makeNodeComponent("outerRow4"),
    row3: makeNodeComponent("row3"),
    heroSection: makeNodeComponent("heroSection"),
    footer: makeNodeComponent("footer"),

    // Metadata about props expected for PlasmicAboutUs
    internalVariantProps: PlasmicAboutUs__VariantProps,
    internalArgProps: PlasmicAboutUs__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicAboutUs;
/* prettier-ignore-end */
